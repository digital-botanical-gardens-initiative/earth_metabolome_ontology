CREATE DATABASE IF NOT EXISTS `emi_db`;
USE `emi_db`;

SET FOREIGN_KEY_CHECKS = 0;
DROP TABLE IF EXISTS `canopus_compound_summary`;
CREATE TABLE canopus_compound_summary (
	id VARCHAR(255)  , 
	`molecularFormula` VARCHAR(255) , 
	adduct VARCHAR(255) , 
	#`precursorFormula` VARCHAR(255) , #removed
	`NPC_pathway` VARCHAR(255) , 
	`NPC_pathway_Probability` DOUBLE , 
	`NPC_superclass` VARCHAR(255) , 
	`NPC_superclass_Probability` DOUBLE , 
	`NPC_class` VARCHAR(255) , 
	`NPC_class_Probability` DOUBLE , 
	`ClassyFire_most_specific_class` VARCHAR(255) , 
	`ClassyFire_most_specific_class_Probability` DOUBLE , 
	`ClassyFire_level_5` VARCHAR(255), 
	`ClassyFire_level_5_Probability` DOUBLE, 
	`ClassyFire_subclass` VARCHAR(255), 
	`ClassyFire_subclass_Probability` DOUBLE, 
	`ClassyFire_class` VARCHAR(255), 
	`ClassyFire_class_Probability` DOUBLE, 
	`ClassyFire_superclass` VARCHAR(255) , 
	`ClassyFire_superclass_probability` DOUBLE , 
	`ClassyFire_all_classifications` VARCHAR(2550) , 
	#`featureId` INT, #removed
    sample_id VARCHAR(255),
	ionization VARCHAR(255),
    PRIMARY KEY (id) #,
   #FOREIGN KEY (sample_id) REFERENCES sample_metadata(sample_id) 
) #ENGINE = MEMORY
;

DROP TABLE IF EXISTS `sample_metadata`;
CREATE TABLE `sample_metadata` (
	sample_id VARCHAR(255), 
	sample_type VARCHAR(255) , 
	source_id VARCHAR(255) COMMENT 'renamed: sample_substance_name',
	organism_kingdom VARCHAR(255) , 
	organism_phylum VARCHAR(255) , 
	organism_class VARCHAR(255) , 
	organism_order VARCHAR(255) , 
	organism_family VARCHAR(255) , 
	organism_genus VARCHAR(255) , 
	source_taxon VARCHAR(255) COMMENT 'renamed: organism_species',   
	organism_organe VARCHAR(255) , 
	organism_broad_organe VARCHAR(255) , 
	organism_tissue VARCHAR(255) , 
	organism_subsystem VARCHAR(255) , 
	sample_plate_id VARCHAR(255) , 
	sample_filename_pos VARCHAR(255) , 
	pos_injection_date DATE , 
	bio_leish_donovani_10ugml_inhibition DOUBLE , 
	bio_leish_donovani_2ugml_inhibition DOUBLE , 
	bio_tryp_brucei_rhodesiense_10ugml_inhibition DOUBLE , 
	bio_tryp_brucei_rhodesiense_2ugml_inhibition DOUBLE , 
	bio_tryp_cruzi_10ugml_inhibition DOUBLE , 
	bio_l6_cytotoxicity_10ugml_inhibition DOUBLE , 
	sample_filename_neg VARCHAR(255) , 
	neg_injection_date DATE , 
	massive_id VARCHAR(255) ,
    ionization VARCHAR(255),
    lcms_method_params TEXT
	#, PRIMARY KEY (sample_id)
	);
    
DROP TABLE IF EXISTS `taxon_metadata`;
CREATE TABLE taxon_metadata (
	a BOOL, 
	sample_id VARCHAR(255), 
	sample_type TEXT, 
	source_id TEXT COMMENT 'renamed: sample_substance_name', 
	organism_kingdom TEXT, 
	organism_phylum TEXT, 
	organism_class TEXT, 
	organism_order TEXT, 
	organism_family TEXT, 
	organism_genus TEXT, 
	source_taxon TEXT COMMENT 'renamed: organism_species',  
	organism_organe TEXT, 
	organism_broad_organe TEXT, 
	organism_tissue TEXT, 
	organism_subsystem TEXT, 
	sample_plate_id TEXT, 
	sample_filename_pos TEXT, 
	pos_injection_date DATE, 
	bio_leish_donovani_10ugml_inhibition DOUBLE, 
	bio_leish_donovani_2ugml_inhibition DOUBLE, 
	bio_tryp_brucei_rhodesiense_10ugml_inhibition DOUBLE, 
	bio_tryp_brucei_rhodesiense_2ugml_inhibition DOUBLE, 
	bio_tryp_cruzi_10ugml_inhibition DOUBLE, 
	bio_l6_cytotoxicity_10ugml_inhibition DOUBLE, 
	sample_filename_neg TEXT, 
	neg_injection_date DATE, 
	massive_id TEXT, 
	is_approximate_match BOOL, 
	is_synonym BOOL , 
	matched_name TEXT, 
	nomenclature_code VARCHAR(255), 
	score DOUBLE, 
	search_string TEXT, 
	taxon_flags TEXT, 
	taxon_is_suppressed BOOL , 
	taxon_is_suppressed_from_synth BOOL , 
	taxon_name TEXT, 
	taxon_ott_id DOUBLE , 
	taxon_rank TEXT, 
	taxon_source TEXT, 
	taxon_synonyms TEXT, 
	taxon_tax_sources TEXT, 
	taxon_unique_name TEXT, 
	_merge TEXT, 
	ott_id DOUBLE , 
	query_otol_domain TEXT, 
	query_otol_kingdom TEXT, 
	query_otol_phylum TEXT, 
	query_otol_class TEXT, 
	query_otol_order TEXT, 
	query_otol_family TEXT, 
	query_otol_tribe TEXT, 
	query_otol_genus TEXT, 
	query_otol_species TEXT, 
	ott_type TEXT, 
	ott_value DOUBLE , 
	wd_type TEXT, 
	wd_value TEXT, 
	img_type TEXT, 
	img_value TEXT,
    PRIMARY KEY (sample_id)
);

DROP TABLE IF EXISTS `features_quant`;
CREATE TABLE features_quant (
	row_ID int,
    row_mz double,
    row_retention_time double,
    peak_area double,
    ionization VARCHAR(255),
    sample_id VARCHAR(255)

);

DROP TABLE IF EXISTS `compound_identifications`;
CREATE TABLE compound_identifications (
	`rank` INT COMMENT 'previous name: confidenceRank', 
#	`structurePerIdRank` INT , #removed
	`formulaRank` INT ,  
	`#adducts` INT ,  
	`#predictedFPs` DOUBLE ,  
	`ConfidenceScore` DOUBLE, 
	`CSI:FingerIDScore` DOUBLE ,  
	`ZodiacScore` DOUBLE ,  
	`SiriusScore` DOUBLE ,  
	`molecularFormula` TEXT ,  
	adduct VARCHAR(255) ,  
	`InChIkey2D` VARCHAR(14) ,  
	`InChI` TEXT ,  
	name TEXT, 
	smiles TEXT ,  
	xlogp DOUBLE ,  
	pubchemids TEXT, 
	links TEXT ,  
	dbflags DOUBLE ,  
	`ionMass` DOUBLE ,  
	`retentionTimeInSeconds` DOUBLE ,  
	id VARCHAR(1000) NOT NULL,  
	#`featureId` INT NOT NULL, #removed
	sample_id VARCHAR(1000),
	ionization VARCHAR(255)
);

DROP TABLE IF EXISTS isdb_reweighted_flat ;
CREATE TABLE `isdb_reweighted_flat` (
	a INT , 
	featureId INT , 
	component_id INT , 
	structure_taxonomy_npclassifier_01pathway_consensus TEXT, 
	freq_structure_taxonomy_npclassifier_01pathway DOUBLE, 
	structure_taxonomy_npclassifier_02superclass_consensus TEXT, 
	freq_structure_taxonomy_npclassifier_02superclass DOUBLE, 
	structure_taxonomy_npclassifier_03class_consensus TEXT, 
	freq_structure_taxonomy_npclassifier_03class DOUBLE, 
	rank_spec INT , 
	score_input DOUBLE , 
	libname TEXT , 
	short_inchikey TEXT , 
	`structure_smiles_2D` TEXT, 
	structure_molecular_formula TEXT, 
	adduct TEXT, 
	structure_exact_mass DOUBLE, 
	structure_taxonomy_npclassifier_01pathway TEXT, 
	structure_taxonomy_npclassifier_02superclass TEXT, 
	structure_taxonomy_npclassifier_03class TEXT, 
	query_otol_species TEXT , 
	lowest_matched_taxon TEXT, 
	score_taxo INT , 
	score_max_consistency INT , 
	final_score DOUBLE , 
	rank_final INT ,
	sample_id VARCHAR(1000),
	ionization VARCHAR(255)
);

DROP TABLE IF EXISTS molecular_network ;
CREATE TABLE `molecular_network` (
	source_id INT NOT NULL, 
	target_id INT NOT NULL, 
	weight DOUBLE ,
    sample_id VARCHAR(1000),
	ionization VARCHAR(255)
    );

DROP TABLE IF EXISTS molecular_network_metadata ;
CREATE TABLE `molecular_network_metadata` (
	feature_id INT,
	component_id INT,
	precursor_mz DOUBLE,
    sample_id VARCHAR(1000),
	ionization VARCHAR(255)
    );
    
DROP TABLE IF EXISTS spec2vec_doc ;
CREATE TABLE `spec2vec_doc` (
	feature_id INT,
    raw_spectrum TEXT,
    word TEXT,
    sample_id VARCHAR(1000),
	ionization VARCHAR(255)
    );
    
DROP TABLE IF EXISTS structures_metadata ;

DROP TABLE IF EXISTS open_tree_life ;
CREATE TABLE `open_tree_life` (
	uid INT NOT NULL, 
	parent_uid INT , 
	tax_name VARCHAR(1000) ,
    tax_rank  VARCHAR(1000),
	sourceinfo TEXT,
    uniqname TEXT,
    flags VARCHAR(1000),
    PRIMARY KEY (uid) );

DROP TABLE IF EXISTS open_tree_life_synonym ;
CREATE TABLE `open_tree_life_synonym` (
	tax_name VARCHAR(1000) ,
    uid INT NOT NULL, 
	tax_type INT , 
    uniqname TEXT,
	sourceinfo TEXT );

DROP TABLE IF EXISTS traits ;
CREATE TABLE traits (
TraitID VARCHAR(300) ,
TraitName VARCHAR(300), 
TOP_ID VARCHAR(300), 
PRIMARY KEY (TraitID));

DROP TABLE IF EXISTS trydbAll ;
CREATE TABLE trydbAll (
LastName VARCHAR(300), 
FirstName VARCHAR(300), 
DatasetID VARCHAR(300),
Dataset VARCHAR(300), 
SpeciesName VARCHAR(300), 
AccSpeciesID VARCHAR(300), 
AccSpeciesName VARCHAR(300), 
ObservationID VARCHAR(300) ,
ObsDataID VARCHAR(300) ,
TraitID VARCHAR(300), 
TraitName VARCHAR(300), 
DataID VARCHAR(300), 
DataName VARCHAR(300), 
OriglName TEXT, 
OrigValueStr VARCHAR(300), 
OrigUnitStr VARCHAR(300), 
ValueKindName VARCHAR(300), 
OrigUncertaintyStr VARCHAR(300), 
UncertaintyName VARCHAR(300), 
Replicates VARCHAR(300), 
StdValue VARCHAR(300), 
UnitName VARCHAR(300), 
RelUncertaintyPercent VARCHAR(300), 
OrigObsDataID VARCHAR(300), 
ErrorRisk VARCHAR(300), 
`Reference` TEXT, 
`Comment` TEXT, 
StdValueStr TEXT, 
DataType VARCHAR(300));

DROP TABLE IF EXISTS taxonomy ;
CREATE TABLE taxonomy (
WdID VARCHAR(300), 
eol VARCHAR(300), 
gbif_wd VARCHAR(300), 
ncbi_wd VARCHAR(300), 
ott VARCHAR(300), 
inat VARCHAR(300), 
itis VARCHAR(300), 
irmng VARCHAR(300), 
col VARCHAR(300), 
nbn VARCHAR(300),
worms VARCHAR(300), 
bold VARCHAR(300), 
plazi VARCHAR(300), 
apni VARCHAR(300), 
WdName VARCHAR(300), 
ncbi_otol VARCHAR(300), 
gbif_otol VARCHAR(300),
TRY_AccSpeciesName VARCHAR(300)
#, PRIMARY KEY (TRY_SpeciesID, wikidata_id)
);

DROP TABLE IF EXISTS enpkg ;
CREATE TABLE enpkg (
raw_material VARCHAR(300), 
wd_taxon_id VARCHAR(300), 
submitted_taxon VARCHAR(300), 
inch VARCHAR(300), 
wd_chem VARCHAR(300), 
organ VARCHAR(300), 
broad_organ VARCHAR(300), 
tissue VARCHAR(300), 
subsystem VARCHAR(300));

DROP TABLE IF EXISTS lotus ;
CREATE TABLE lotus(
structure_wikidata VARCHAR(300),
structure_inchikey VARCHAR(300),
structure_inchi VARCHAR(300),
structure_smiles VARCHAR(300),
structure_molecular_formula VARCHAR(300),
structure_exact_mass VARCHAR(300),
structure_xlogp VARCHAR(300),
structure_smiles_2D VARCHAR(300),
structure_cid VARCHAR(300),
structure_nameIupac VARCHAR(300),
structure_nameTraditional VARCHAR(300),
structure_stereocenters_total VARCHAR(300),
structure_stereocenters_unspecified VARCHAR(300),
structure_taxonomy_npclassifier_01pathway VARCHAR(300),
structure_taxonomy_npclassifier_02superclass VARCHAR(300),
structure_taxonomy_npclassifier_03class VARCHAR(300),
structure_taxonomy_classyfire_chemontid VARCHAR(300),
structure_taxonomy_classyfire_01kingdom VARCHAR(300),
structure_taxonomy_classyfire_02superclass VARCHAR(300),
structure_taxonomy_classyfire_03class VARCHAR(300),
structure_taxonomy_classyfire_04directparent VARCHAR(300),
organism_wikidata VARCHAR(300),
organism_name VARCHAR(300),
organism_taxonomy_gbifid VARCHAR(300),
organism_taxonomy_ncbiid VARCHAR(300),
organism_taxonomy_ottid VARCHAR(300),
organism_taxonomy_01domain VARCHAR(300),
organism_taxonomy_02kingdom VARCHAR(300),
organism_taxonomy_03phylum VARCHAR(300),
organism_taxonomy_04class VARCHAR(300),
organism_taxonomy_05order VARCHAR(300),
organism_taxonomy_06family VARCHAR(300),
organism_taxonomy_07tribe VARCHAR(300),
organism_taxonomy_08genus VARCHAR(300),
organism_taxonomy_09species VARCHAR(300),
organism_taxonomy_10varietas VARCHAR(300),
reference_wikidata VARCHAR(300),
reference_doi VARCHAR(300),
manual_validation VARCHAR(300));

DROP TABLE IF EXISTS interactions ;
CREATE TABLE interactions (
sourceTaxonId TEXT, 
sourceTaxonName TEXT, 
sourceTaxonRank TEXT, 
sourceTaxonPathNames TEXT, 
sourceTaxonPathIds TEXT, 
sourceTaxonPathRankNames TEXT, 
sourceTaxonSpeciesName TEXT, 
sourceTaxonSpeciesId TEXT, 
sourceTaxonSubgenusName TEXT, 
sourceTaxonSubgenusId TEXT, 
sourceTaxonGenusName TEXT, 
sourceTaxonGenusId TEXT, 
sourceTaxonFamilyName TEXT, 
sourceTaxonFamilyId TEXT, 
sourceTaxonOrderName TEXT, 
sourceTaxonOrderId TEXT, 
sourceTaxonClassName TEXT, 
sourceTaxonClassId TEXT, 
sourceTaxonPhylumName TEXT, 
sourceTaxonPhylumId TEXT, 
sourceTaxonKingdomName TEXT, 
sourceTaxonKingdomId TEXT, 
sourceId TEXT, 
sourceOccurrenceId TEXT, 
sourceInstitutionCode TEXT, 
sourceCollectionCode TEXT, 
sourceCatalogNumber TEXT, 
sourceBasisOfRecordId TEXT, 
sourceBasisOfRecordName TEXT, 
sourceLifeStageId TEXT, 
sourceLifeStageName TEXT, 
sourceBodyPartId TEXT, 
sourceBodyPartName TEXT, 
sourcePhysiologicalStateId TEXT, 
sourcePhysiologicalStateName TEXT, 
sourceSexId TEXT, 
sourceSexName TEXT, 
interactionTypeName TEXT, 
interactionTypeId TEXT, 
targetTaxonId TEXT, 
targetTaxonName TEXT, 
targetTaxonRank TEXT, 
targetTaxonPathNames TEXT, 
targetTaxonPathIds TEXT, 
targetTaxonPathRankNames TEXT, 
targetTaxonSpeciesName TEXT, 
targetTaxonSpeciesId TEXT, 
targetTaxonSubgenusName TEXT, 
targetTaxonSubgenusId TEXT, 
targetTaxonGenusName TEXT, 
targetTaxonGenusId TEXT, 
targetTaxonFamilyName TEXT, 
targetTaxonFamilyId TEXT,
targetTaxonOrderName TEXT, 
targetTaxonOrderId TEXT, 
targetTaxonClassName TEXT, 
 targetTaxonClassId TEXT, 
 targetTaxonPhylumName TEXT, 
 targetTaxonPhylumId TEXT, 
 targetTaxonKingdomName TEXT, 
 targetTaxonKingdomId TEXT, 
 targetId TEXT, 
 targetOccurrenceId TEXT, 
 targetInstitutionCode TEXT, 
 targetCollectionCode TEXT, 
 targetCatalogNumber TEXT,
 targetBasisOfRecordId TEXT, 
 targetBasisOfRecordName TEXT, 
 targetLifeStageId TEXT, 
 targetLifeStageName TEXT, 
 targetBodyPartId TEXT, 
 targetBodyPartName TEXT, 
 targetPhysiologicalStateId TEXT, 
 targetPhysiologicalStateName TEXT, 
 targetSexId TEXT, 
 targetSexName TEXT, 
 decimalLatitude TEXT, 
 decimalLongitude TEXT, 
 localityId TEXT, 
 localityName TEXT, 
 eventDate TEXT, 
 argumentTypeId TEXT, 
 referenceCitation TEXT, 
 referenceDoi TEXT, 
 referenceUrl TEXT, 
 sourceCitation TEXT, 
 sourceNamespace TEXT, 
 sourceArchiveURI TEXT, 
 sourceDOI TEXT, 
 sourceLastSeenAtUnixEpoch TEXT,
 source_BOLD TEXT, 
 source_COL TEXT, 
 source_ENVO TEXT, 
 source_EOL TEXT, 
 source_FB TEXT,
 source_FBC TEXT, 
 source_GBIF TEXT,
 source_IF TEXT, 
 source_IRMNG TEXT, 
 source_ITIS TEXT, 
 source_NBN TEXT, 
 source_NCBI TEXT, 
 source_PBDB TEXT, 
 source_SLB TEXT, 
 source_SPECCODE TEXT, 
 source_TAXON TEXT, 
 source_W TEXT, 
 source_WD TEXT, 
 source_WORMS TEXT, 
 target_BOLD TEXT, 
 target_COL TEXT, 
 target_ENVO TEXT, 
 target_EOL TEXT, 
 target_FB TEXT, 
 target_FBC TEXT, 
 target_GBIF TEXT, 
 target_IF TEXT, 
 target_IRMNG TEXT, 
 target_ITIS TEXT, 
 target_NBN TEXT, 
 target_NCBI TEXT, 
 target_PBDB TEXT, 
 target_SLB TEXT, 
 target_SPECCODE TEXT, 
 target_TAXON TEXT, 
 target_W TEXT, 
 target_WD TEXT, 
 target_WORMS TEXT);

SET FOREIGN_KEY_CHECKS = 1;